[{"categories":["AI-工作站 完全配置指南"],"content":"首先ubuntu-24.04安装完成后默认可以正常使用iBUS中文输入法，这个比此前的版本体验好，但是使用一段时间后就出现输入问题了，比如输入的字符重复多次，空格没法使待选词上屏，一些界面中没法激活输入法，一些界面使用ESC又没法关闭输入法，简直没法使用了… 所以考虑更换默认的输入法，首先考虑windows中常用的搜狗输入法，使用官方的教程安好后确实很好用，常用的app中使用非常顺畅，再也没有出现之前的各种奇怪问题了，然而，很快又发现了问题，那就是概率的出现在桌面文件重命名时没法激活输入法，而且概率出现打开文本编辑器中没法激活输入法…这很影响使用的，所以只能继续寻找更好的输入法。 最后经过详细的搜索的调研后，发现大家评价最好的中文输入法就是：fcitx系列，最新的是fcitx5这个版本，更新比较及时，搜狗输入法已经很久没有维护了（貌似最近还是很多年的事了，也难怪出现一些激活失败的问题），所以决定试试这个吧。结果经过一段时间的使用，确实如大家的评价一样，使用感受是最好的一款了，下面就针对fcitx5的安装配置进行详细的说明。 安装fcitx5 最好的安装配置指导都应该尽量看官方的文档，所以我们到fcitx5的官网看看：fcitx5 repo 地址，ubuntu-24.04在官方仓库中适配的是这个版本，虽然不是最新的，但根据这么长时间的ubuntu使用经验来看，这个版本的适配性最好，盲目追求最新版本可能会出现适配问题的，所以我们就是使用apt仓库中的版本。 具体方法是可以直接打开 应用中心， 搜索 fcitx，选择类别 Debian包，从搜索结果中选择 “fcitx5输入法” 和 “中文附加组件” 进行安装， fcitx5输入法 fcitx5中文附加组件 安装之后，还需要设置环境变量，在 ~/.profile 中末尾添加如下变量： export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx export SDL_IM_MODULE=fcitx 接着，我们来设置自动启动，输入法这个最好是在系统启动后自动启动比较方便： 在 应用中心 里搜索 GNOME Tweaks，然后安装这个Debian包 GNOME Tweaks 安装之后然后在 系统工具 里找到 优化 打开，就是GNOME Tweaks 开机启动程序 然后找到 fcitx5，然后点击 添加，这样就将输入法设置为开机启动了。 添加开机启动程序 接下来，我们还需要配置下fcitx5让它使用起来更加顺手，我们在 系统工具 中打开 fcitx配置，配置成如下图中的顺序： fcitx设置 全局选项：按照截图中来配置，红框的项目需要重点配置，这个极为影响使用体验；完成后基本可以和Windows对齐了。 fcitx快捷键设置 附加组件 也按照截图中进行配置，注意勾选的项目，并且取消了非必要的快捷键。 fcitx附件组件设置 到目前位为止，fcitx5输入法的配置已经完成，使用基本可以将windows中使用习惯丝滑平移过来！ 但fcitx5默认的候选框主题有点与系统风格不搭，所以接下来可以继续美化下主题显示： 继续在 应用中心 搜索 扩展管理器，安装后打开，在 浏览 中搜索 Input Method Panel并安装。 input method panel 这个插件安装之后基本是立即生效，现在打开输入法，界面优化了，如果出现显示异常或者没有生效的问题，请注销后重新登陆即可解决。 fcitx5输入法效果 至此，中文输入法的所有配置都已完成，现在终于可以在Ubuntu中畅快的输入中文啦！ ","date":"2025-08-31","objectID":"/ai-server/a68fbbd/:0:0","tags":["AI-Workstation","输入法"],"title":"中文输入法配置","uri":"/ai-server/a68fbbd/"},{"categories":["AI-工作站 完全配置指南"],"content":"这是本系列的BIOS优化篇，参考了 AMD 官方文档，旨在帮助您优化基于 AMD EPYC™ 7002 系列处理器的系统 BIOS 设置，以获得最佳的 AI 工作负载性能。 参考文档： High Performance Computing (HPC) Tuning Guide for AMD EPYC™ 7002 Series Processors AMD EPYC™ 9005 BIOS \u0026 WORKLOAD TUNING GUIDE AI 工作负载的特点与优化目标 AI 工作负载，特别是深度学习，对计算资源有极高的要求，主要体现在： 高浮点计算： 需要充分利用如 AVX2 等专用指令，并尽可能保持核心频率在最高水平。 高内存带宽和容量： 大规模数据集的加载和处理对内存速度和 NUMA 拓扑十分敏感。 高效数据传输： 快速的互连（例如 PCIe）对于将计算任务卸载到 GPU 等加速器至关重要。 考虑到这些特点，以下是需要重点关注的 BIOS 设置。 关键 BIOS 设置详解 1. NUMA 配置（NPS - 每插槽 NUMA 域） 目标： 优化数据局部性和内存带宽。AI 工作负载对数据访问模式极为敏感。 建议： 对于大多数 AI 工作负载，推荐将 NPS 设置为 2 或 4。 NPS=2：每个处理器插槽创建两个 NUMA 域。这能有效利用内存带宽，是兼顾性能和通用性的优秀选择。 NPS=4：每个处理器插槽创建四个 NUMA 域。该设置适合高度并行，且每个 NUMA 节点的数据集较小的工作负载。通过将进程显式绑定到特定 NUMA 节点，可以实现极致的数据局部性。 如何检查： 在 Linux 系统中，您可以使用 numactl --hardware 或 hwloc-ls 命令来验证更改后的 NUMA 拓扑。 注意 实践下来发现：NPS=1，对于推理任务是更优的选择。 2. 核心性能和功耗设置 目标： 确保 CPU 核心始终以最高频率稳定运行，并最小化延迟。 性能模式： 将 “Determinism Slider” 或类似的性能模式选项设置为 “Performance” 或 “Max Performance”。这会优先考虑性能而非能效，让核心时钟保持在高位。 C-states： 将 “Global C-state Control” 或 “C-States” 设置为**“Disabled”**。C-states 是 CPU 的节电模式，虽然能节省能源，但在核心需要从低功耗状态唤醒时会引入延迟，从而影响 AI 训练的一致性。 P-states： 寻找 “P-states Control”、“DF P-states” 或 “APBDIS” 等设置。禁用 P-states 或确保处理器锁定在其最高性能状态（P0）。这能防止 CPU 频率随负载动态调整，从而保证最高时钟速度。 3. 内存设置 目标： 最大化内存带宽，同时降低延迟。 内存速度： 将内存配置为在主板和 DIMM 所支持的最优延迟下运行，例如 DDR4-2933 MT/s，并不推荐 3200 MT/s，因为7002系列的Infinity Fabric时钟为2933，使内存时钟与Infinity Fabric时钟保持同步对于低延迟是更优的选择。 内存交错： 确保内存交错配置能提供最佳带宽。通常，为每个插槽填满所有 8 个内存通道能获得最大带宽。具体设置请参考您系统的官方文档。 4. PCIe 和 IOMMU 目标： 确保 GPU 和其他加速器之间能实现最佳通信。 PCIe 代数： 将用于 GPU 的 PCIe 插槽设置为其支持的最高代数和链路宽度（例如 PCIe Gen4 x16）。 Above 4G Decoding： 务必启用该选项。这对于拥有大量 GPU 显存的系统至关重要，能让系统正确识别和映射超过 4GB 的 I/O 内存。 IOMMU： 如果您使用虚拟化或需要设备直通的容器技术，请保持 IOMMU 启用。对于裸机 AI 训练，禁用该选项可能会带来微不足道的性能提升，但为了系统稳定性和日后的灵活性，通常建议保持启用。 推荐的基线 BIOS 设置 下表提供了一套经过验证的，适用于 AI 工作负载的 BIOS 基线设置。 ACPI Settings ACPI Settings 项目 设置值 High Precision Event Timer [Disabled] NUMA Nodes Per Socket [NPS1] ACPI SRAT L3 Cache As NUMA Domain [Enabled] North Bridge Configuration North Bridge Configuration 项目 设置值 Determinism Control [Manual] Determinism Slider [Performance] cTDP Control [Manual] cTDP 220 IOMMU [Enabled] Package Power Limit Control [Manual] Package Power Limit 220 APBDIS [0] DF Cstates [Disabled] Memory Configuration Memory Configuration 项目 设置值 Memory Clock [2933MHz] TSME [Disabled] CPU Configuration CPU Configuration 项目 设置值 Global C-state Control [Disabled] PCI Devices Common Settings PCI Devices Common Settings 项目 设置值 Above 4G Decoding [Enabled] SR-IOV Support [Enabled] VGA Priority [Offboard] 通用调优原则和后续步骤 基准测试和迭代： BIOS 调优是一个持续的迭代过程。每次更改后，都应运行特定的 AI 工作负载基准测试，衡量性能（如吞吐量、训练速度）并根据结果进行调整。 操作系统调优： 别忘了，BIOS 只是优化过程的一部分。操作系统级别的优化同样关键，例如使用 numactl 等工具进行 CPU 亲和性绑定、调整内核参数或禁用不必要的后台服务。 软件栈优化： 确保您的 AI 框架（如 TensorFlow, PyTorch）、底层库（如 cuDNN, MKL, ROCm）和驱动程序（NVIDIA, AMD）都已更新到最新版本并进行了相应的优化配置。 通过遵循上述指南，您可以显著提升 AMD EPYC 7002 系统在 AI 工作负载下的性能和效率。 ","date":"2025-08-23","objectID":"/ai-server/a1df1f9/:0:0","tags":["AI-Workstation","BIOS Tuning"],"title":"BIOS优化","uri":"/ai-server/a1df1f9/"},{"categories":["AI-工作站 完全配置指南"],"content":"本系列的AI-工作站的硬盘配置是SSD+HDD组合，合理分配和优化这些资源非常重要。 系统：Ubuntu-24.04 Linux System Partition Policy 资源分配思路 核心思想是：速度最快的 SSD 用于系统和常用应用，次快的 SSD 用于高性能数据或备份，HDD 用于大容量冷存储。 SSD 1 (已安装 Ubuntu 系统，1TB) 用途： 操作系统、应用程序、少量常用个人文件。 分配方案： / (根目录): 分配 100GB - 200GB。这将包含 Ubuntu 系统本身、所有安装的软件、以及一些系统缓存。这个大小足以应对大多数用户的需求，甚至安装大量软件也绰绰有余。 /home (用户主目录): 将 SSD 1 的剩余空间都分配给 /home。如果你想将一部分 /home 分区放在 HDD 上（比如仅将大媒体文件放在 HDD），则这里可以根据需求分配，但为了最大化个人文件访问速度，推荐将大部分个人常用文件放在这里。 SWAP (交换空间): 不推荐使用。 SSD 2 (空闲，1TB) 用途： 高性能工作负载、重要项目、虚拟机、游戏库、频繁访问的大型数据集、快速备份、或作为 SSD 1 的扩展高速存储。 分配方案： 单个分区，挂载到 /mnt/ssd2 或 /data/ssd_fast 等自定义目录。 格式化为 ext4 文件系统。 具体用途示例： 虚拟机镜像： 如果你运行多个虚拟机，将它们放在这里能获得最佳性能。 大型游戏库： 将 Steam 库或其他游戏安装到此驱动器。 视频编辑/图形设计工作区： 临时存放项目文件和渲染输出。 代码仓库/开发环境： 如果你的项目依赖大量文件I/O。 Dropbox/Nextcloud 等云同步文件夹： 如果你的云同步目录很大且需要快速访问。 缓存或临时目录： 某些应用程序的超大缓存，例如 Docker 镜像存储目录。 HDD (空闲，4TB) 用途： 大容量存储，不常用或对速度要求不高的数据，归档，媒体文件（电影、音乐）、长期备份。 分配方案： 单个分区，挂载到 /mnt/hdd_storage 或 /data/archive 等自定义目录。 格式化为 ext4 文件系统。 具体用途示例： 电影、电视剧、音乐库。 照片归档。 系统备份 (Timeshift 备份目标)。 不常用的旧项目文件。 软件安装包的归档。 安装过程指导 从头开始规划的效果是最好的，不用担心和处理复杂的修改分区和数据迁移的操作，推荐。 备份所有重要数据！ 两次强调！ 创建 Ubuntu 安装 U 盘。 从 U 盘启动，选择 “Something else” (其他选项) 进行手动分区。 分区步骤示例： SSD 1 (1TB)： EFI System Partition (ESP): 512MB，FAT32，挂载点 /boot/efi 。 / (根目录): 100GB - 200GB，ext4，挂载点 / 。 /home (用户主目录): 剩余空间 (约 800GB - 900GB)，ext4，挂载点 /home 。 SSD 2 (1TB)： /mnt/ssd2_data (自定义目录): 整个 1TB，ext4，挂载点 /mnt/ssd2_data (你也可以选择 /data 或其他你喜欢的名字)。 HDD (4TB)： /mnt/hdd_archive (自定义目录): 整个 4TB，ext4，挂载点 /mnt/hdd_archive (你也可以选择 /data_archive 或 /media/storage 等)。 根目录 / 预留空间建议 在 Ubuntu 重装方案中，/ 根目录预留多少空间是一个常见的问题。这个目录包含了操作系统核心文件、大多数已安装的应用程序以及各种系统配置和临时文件。 对于你拥有两个 1TB SSD 和一个 4TB HDD 的情况，/ 根目录的合理预留空间建议是： 推荐范围： 80GB - 150GB 这个范围对于大多数用户来说是绰绰有余的。 80GB: 对于安装标准 Ubuntu 系统和一些常用软件（如浏览器、办公套件、邮件客户端、一些开发工具）来说，80GB 已经非常宽裕。你会剩下大量空间来应对未来的软件安装和系统更新。 100GB - 150GB: 如果你是一个软件爱好者，喜欢尝试各种工具、游戏，或者进行大量开发工作（例如安装Docker、多个IDE、虚拟机软件本身），那么这个范围会让你更安心，有足够的增长空间。 为什么不建议更大？ 浪费空间： 考虑到你的第一个 SSD 有 1TB，如果你给 / 分配 300GB 甚至 500GB，那么这部分空间很可能永远都用不完。 管理不便： 预留过大的 / 空间，可能会导致 /home 或其他数据分区（比如你计划在第二个 SSD 上创建的数据分区）的空间被挤压，或者无法进行更精细的分配。 为什么不建议太小？ 未来扩展困难： 虽然 Linux 文件系统允许调整分区大小，但缩小或扩展根分区通常比较麻烦，最好在安装时就预留足够空间。 更新问题： 系统更新，特别是内核更新，会占用一些空间。如果 / 太小，可能会导致更新失败。 应用安装受限： 某些大型应用程序会默认安装到 /opt 或 /usr/local 下，这些都属于根目录。 针对 Workstation 的具体配置 实际分区如下： / 根目录：100GB 这个大小能确保系统核心和所有可能安装的软件（CUDA系列）都有充足的空间。 /home 用户主目录：将 SSD 1 的剩余空间全部给它 例如，如果 / 是 100GB，那么 /home 将有大约 800GB 左右的可用空间（考虑到文件系统开销）。这个空间对于存放常用文档、项目文件、大部分照片都是非常理想的。 这样分配的好处是： 性能最大化： 操作系统、应用程序和你的日常使用文件都在最快的 SSD 上。 管理简洁： 无需担心哪些文件该放在哪个 SSD 的哪个分区，大部分文件都集中管理。 利用率高： 1TB 的 SSD 得到了充分利用。 至于第二个 1TB 的 SSD，它将专门作为高速数据盘，可以用于虚拟机、大型游戏库、视频编辑项目等，而 4TB 的 HDD 则用于海量冷存储和备份。 这就是我们的系统分区推荐策略啦！ ","date":"2025-08-19","objectID":"/ai-server/aef70e5/:0:0","tags":["AI-Workstation","Partition Policy"],"title":"Linux系统分区策略","uri":"/ai-server/aef70e5/"},{"categories":["AI-工作站 完全配置指南"],"content":"在为 AI 工作负载选择操作系统时，Windows 和 Linux 就像硬币的两面，各自拥有独特的优势与痛点。这篇总结源自我近半年的亲身实践，记录了在两大系统间反复横跳的经历，最终得出了一个对 AI 从业者极具价值的结论。 Linux-vs-Windows 序章：Ubuntu 22.04 的初次邂逅 最初，我为 AI 工作站选择了 Ubuntu 22.04 LTS，这是 AI 领域最常见的选择。安装过程顺畅，界面现代。然而，好景不长，一系列琐碎但恼人的问题接踵而至： 远程桌面：Windows RDP 虽可用，但每次都要输入随机密码，效率低下。其他远程工具也因分辨率等问题无法稳定使用。 硬件控制：NVIDIA 显卡风扇的转速控制成了大难题。默认温控策略极不合理，网上的各种“偏方”几乎全部无效，耗费了大量时间。 开发环境：Python 和 PyTorch 的版本依赖问题复杂，导致环境配置受阻。 桌面体验：中文输入法需要手动配置且稳定性欠佳，习惯了的 Windows 应用（如 Notepad++）在 Linux 上体验不佳，Snap 应用的兼容性问题频发（如 VS Code 输入框错位、PyCharm 包管理无法刷新）。 这些看似无关紧要的小问题，积少成多，极大地影响了工作效率。当 NVIDIA 显卡风扇问题在整个五一假期都无法解决时，我开始动摇了。 第一回合：重返 Windows 的“甜蜜期” 一次冲动之下，我决定重装 Windows 11。整个过程不过两小时，所有驱动和应用都开箱即用，显卡风扇曲线控制也只需安装官方软件即可搞定。这种丝滑的体验与 Linux 的“折磨”形成了鲜明对比。Python 多版本管理、CUDA 配置等也轻车熟路，一两天内就搭建好了整个开发环境。 Windows 的优势显而易见：入门门槛极低，兼容性无与伦比。你可以轻松使用各种商业软件，不必为硬件驱动而烦恼。 然而，在使用三四个月后，Windows 的“黑屏登录”和偶发性高 CPU 占用问题再次点燃了我切换回 Linux 的决心。特别是当 CPU 长时间 100% 占用导致所有风扇全速狂转，而 Windows 平台针对 IPMI 的控制方案又极少时，我意识到，对于 AI 这种需要稳定、可控的重型工作负载，Windows 并非长久之计。 第二回合：坚守 Linux 的“新生” 带着解决所有问题的决心，我再次回到 Linux。这次，我吸取教训，选择了更具前瞻性的 Ubuntu 24.04 LTS。安装体验出乎意料地流畅，直接联网安装 NVIDIA 驱动后，一切顺利。困扰我许久的 NVIDIA 风扇控制问题，这次只通过一个简单的 cool-bit=4 参数就轻松解决。 Ubuntu 24.04 的桌面体验也比 22.04 更加现代，甚至可以与 Windows 11 一较高下。那一刻，我终于明白，Linux 的前期痛苦并非无解，只是需要找到正确的路。 Windows vs Linux：AI 工作负载深度体验总结 经过这段曲折的系统选型之路，我总结了以下针对 AI 工作负载的核心对比，希望能为你的决策提供参考。 比较维度 Windows Linux 入门与易用性 极高：安装便捷，开箱即用，应用生态丰富，硬件兼容性好。 极低：学习曲线陡峭，基础功能需手动配置，易因误操作而崩溃。 AI 环境配置 困难：教程相对少，Docker 依赖 WSL，新工具适配慢。 便捷：生态原生友好，命令几行代码即可，开源工具第一时间适配。 开发与控制 一般：需通过 WSL 或虚拟机模拟 Linux 环境，命令行工具整合度低。 极佳：终端是核心，工具链深度集成，所有配置都可自定义。 系统纯净度 较低：冗余应用多，广告推送、强制更新频繁，后台服务繁杂。 极高：纯净开源，无任何广告，系统资源占用极低，更专注。 性能表现 标准：CUDA 性能正常。 潜在优势：部分场景下 CUDA 性能可提升 4%-10%。 专注度 易分散：丰富的娱乐、游戏应用容易分心。 易聚焦：界面朴素、应用精简，天然减少干扰，利于项目开发。 总结与建议： Windows 适合你，如果… 你是 AI 初学者，需要一个易于上手的环境。 你依赖成熟的商业软件或需要兼顾日常办公和娱乐。 你追求开箱即用的便利性，不愿意花时间折腾。 Linux 适合你，如果… 你已经跨越了初期的学习门槛。 你追求极致的开发效率和对系统的完全控制权。 你的工作重心是 AI 模型开发、训练和部署。 你希望获得更高的性能和更纯粹的工作环境。 结论：Windows 胜在易用性和兼容性，是 AI 入门与混合场景的优秀选择。但一旦进入 AI 开发的深水区，Linux 才是真正释放生产力的理想平台。虽然前期需要投入时间和精力，但其带来的开发效率、自由度和性能优势，将最终证明这笔投入是值得的。 ","date":"2025-08-18","objectID":"/ai-server/dd4a6d4/:0:0","tags":["AI-Workstation","OS"],"title":"AI 工作站系统选型","uri":"/ai-server/dd4a6d4/"},{"categories":["AI-工作站 完全配置指南"],"content":"对于热衷于AI开发的极客们来说，拥有一台性能强劲、扩展性拉满的AI工作站是提升效率、探索前沿技术的关键。本文将分享一个经过精心规划和实践验证的硬件选型方案，旨在以极致性价比打造一台能够同时兼顾日常使用和未来AI工作负载升级的强大机器。 AI工作站 整体效果 这台工作站的核心定位非常明确：一台能够完全替代 Windows、以 AI 开发为主要任务的主力机。为了应对未来多变的 AI 工作负载，我们必须为硬件配置预留足够的“成长空间”。这意味着至少要能支持四张显卡，且所有 PCIe 接口的速度都不能成为瓶颈。因此，我们的核心要求是：CPU 至少提供 4×16=644 \\times 16 = 644×16=64 条 PCIe 4.0 通道，以确保多卡并行计算的效率。 核心组件：性能与扩展性的完美平衡 CPU：AMD EPYC™ 7542——二手市场的“性价比之王” AMD-EPYC-7000系列CPU 面对上述严苛的 PCIe 通道需求，我们很快将目光锁定在了服务器级别的 AMD EPYC 系列。其超高的 Serdes 通道数与亲民的二手价格，让它在工作站领域大放异彩。综合考量日常使用的响应速度，我们选择了 AMD EPYC™ 7542 这款 32 核 64 线程的处理器。它高达 3.4GHz 的加速频率，在保证多任务并行能力的同时，也能兼顾单核性能，真正做到了“鱼与熊掌”兼得。 主板：Supermicro H12SSL-i——为AI而生 Supermicro-H12SSL-i PCB 选择了强大的 EPYC CPU，与之匹配的主板自然也非等闲之辈。Supermicro H12SSL-i 这款主板凭借其惊人的扩展性脱颖而出：它提供了 5 个 PCIe 4.0 x16 插槽和 2 个 PCIe 4.0 x8 插槽，完美满足了多卡部署的需求。 Supermicro-H12SSL-i 功能框图 同时，8 条 DIMM 内存插槽最高支持 2TB ECC 内存，这为未来加载大型语言模型（如使用 llama.cpp）提供了坚实的内存保障，彻底告别“内存焦虑”。不过，服务器主板带来的 IPMI 等高级功能也需要一定的学习成本，但这无疑是值得的。 内存：从够用，到“喂饱”LLM DDR4 ECC RDIMM 内存条 最初的配置是 4 条 32GB DDR4 3200MHz ECC 内存，总计 128GB。虽然在当时看来相当充裕，但在今天的 LLM 时代，这已经显得捉襟见肘。因此，我们强烈建议将内存容量升级至 512GB 甚至 1TB，这将极大地提升处理大型模型时的效率。 显卡：RTX-4060-16G——AI工作负载的甜品卡 NVIDIA RTX-4060-Ti-16G 对于AI工作负载，显存容量往往比绝对性能更重要。NVIDIA RTX-4060-Ti-16G 凭借其 16GB 的大显存和相对较低的功耗，成为了初期投入的最佳选择。它在 AI 负载上的性价比无人能敌。初期可以先配置一张，后续根据训练需求，逐步增加至四张，或更换为更高阶的显卡。 电源、机箱与散热：为稳定运行保驾护航 电源： 考虑到未来四卡满载的功率需求，我们果断选择了长城（Great Wall）额定2000W 巨龙GW-EPS2000BL 消费级电源。作为核心耗损件，电源的稳定至关重要，因此这部分必须选择全新的。 机箱： 为了容纳巨大的服务器主板、多张显卡和强大的散热系统，我们选择了尺寸最大的追风者 PK620 XL 全塔式工作站机箱，它为未来的所有升级都预留了充足的空间。 散热： 稳定是长期工作的基石。我们选择了全风冷方案，并配置了多达 7 个追风者机箱风扇（6个14cm，1个16cm），以及专用的 EPYC 散热器，确保这台“AI猛兽”在长时间高负载运行下，依然能保持冷静。 存储：速度与备份两手抓 ZHITAI-SSD 存储方案采用了“SSD+HDD”的组合：长江存储的 NVMe SSD 作为系统盘和常用应用盘，提供极致的读写速度；而西部数据的紫盘 HDD，则作为数据备份盘，其为监控优化的 7x24 小时高可靠性，为你的珍贵数据保驾护航。 最终配置清单 组件 型号/规格 关键参数 数量 备注 CPU AMD EPYC 7542 32 核 64 线程，最高 3.4GHz 1 二手优先，128 条 PCIe 4.0 通道 主板 Supermicro H12SSL-i 5× PCIe 4.0 x16，8× DDR4 DIMM 1 二手优先，支持 2TB ECC 内存 内存 DDR4 ECC RDIMM 4x 32GB，总计 128GB 4 二手优先，建议升级至 512GB+ 显卡 RTX 4060 16GB 16GB GDDR6 显存 1~4 二手优先，高显存性价比之选 电源 长城 2000W ATX 80 PLUS 白金认证 1 必须全新，为未来多卡留足余量 机箱 追风者 PK620 XL 全塔式，支持 E-ATX 主板 1 全新，为散热和扩展性设计 散热 专用 EPYC 散热器 + 追风者风扇 全风冷方案 1 + 7 全新，确保长期稳定运行 存储 长江存储 SSD + WD HDD NVMe SSD + SATA HDD 3 全新，兼顾速度与数据安全 ","date":"2025-08-07","objectID":"/ai-server/1558209/:0:0","tags":["AI-Workstation","hardware"],"title":"AI 工作站硬件选型指南","uri":"/ai-server/1558209/"}]